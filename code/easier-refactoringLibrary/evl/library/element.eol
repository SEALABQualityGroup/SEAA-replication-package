/*
	ci sono dei problemi con lo stereotipo "RtUnit" per adesso viene solamente applicato e non vengono
	clonati i valori degli attributi.
	In particolare da problemi l'attributo "queueSchedPolicy"
*/
//clone gli stereotipi
operation UML!Element cloneAppliedStereotypesFrom(element : UML!Element) {
	if(element.isUndefined() or element.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: cloneAppliedStereotypesFrom() in element.eol");
	}else{
		for(stereotype in element.getAppliedStereotypes()){
			if(not self.hasStereotype(stereotype.getName())){
				self.applyStereotype(stereotype);
				
				if(stereotype.name = "DaComponent"){
					
					var daFailureTag = element.getTag("DaComponent", "failure")->first();
					var daFailureType = daFailureTag.type;
					//it invokes the EcoreUtil, shall it work within a standalone java invocation?
					var emfTool : new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
					//creates a new instance of @param
					var daFailure = emfTool.getECoreUtil().create(daFailureType);
					//it is dummy value. it must be set wrt to the component/operation
					daFailure.occurrenceProb.add("0.56");
					var failureTag = self.getTag("DaComponent", "failure");
					failureTag.add(daFailure);
				}
			}
				
			if(stereotype.name <> "RtUnit" and stereotype.name <> "GaExecHost" and stereotype.name <> "DaComponent"){
				self.setAttributeValueFrom(stereotype, element);
			}
		}
	}
}

//clone gli attributi interni dello stereotipo
operation Element setAttributeValueFrom(stereotype : Stereotype, element : Element){
	var stereotypeAttr = stereotype.getAttributes();
	
	
	for(attr in stereotypeAttr){
		if(attr.name <> "base_Element" and attr.name <> "base_NamedElement")
		{ 
			var attrValue; //= element.getValue(stereotype, attr.name);
			
			if(element.getValue(stereotype, attr.name).isTypeOf(Set))
				attrValue = element.getValue(stereotype, attr.name).clone();
			else
				attrValue = element.getValue(stereotype, attr.name);
			
			//attrValue.println("attrValue --> ");
			//attr.name.println("attr name --> ");
			
			if(attrValue.isDefined()){
				self.setValue(stereotype, attr.name, attrValue);
			}
		}
	}
	
	//self.getTag("DaComponent", "failure").println("self get tag --> ");
	//element.getTag("DaComponent", "failure").println("element get tag --> ");
}

//clone gli attributi interni dello stereotipo
operation Element setTaggedValue(stereotype : Stereotype, tag : String, value : Any){
	var stereotypeAttr = stereotype.getAttributes();
	for(attr in stereotypeAttr){
		if(attr.name <> "base_Element" and attr.name <> "base_NamedElement" and attr.name == tag)
		{ 
			var attrValue = self.getValue(stereotype, tag);
			if(attrValue.isDefined()){
				self.setValue(stereotype, attr.name, attrValue);
			}
		}
	}	
}

operation Element hasStereotype(stereotypeName : String) : Boolean {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: hasStereotype() in element.eol");
	}
	return self.getAppliedStereotypes()->exists(s | s.name = stereotypeName);
}

operation Element getStereotype(stereotypeName : String) : Stereotype {
	if(self.isUndefined() or self.getAppliedStereotypes().isUndefined() ){
		("the element is undefined").println();
		showError("Method: getStereotype() in element.eol");
	}

	return self.getAppliedStereotypes()->select(s | s.name = stereotypeName)->first();
}

operation Element reductionServDemand(percentage : Real){
	if(self.hasStereotype("GaStep")){
		var stereotype = self.getStereotype("GaStep");
		var newValue : Sequence(String) = new Sequence(String);
		var servCountValues = self.getValue(stereotype, "servCount");
		for(sC in servCountValues){
			var value = sC.asReal();
			newValue.add((value - (value*percentage/100)).asString());
		}
		self.setValue(stereotype, "servCount", newValue);
	}
}

operation Element getTag(stereotype : String, tag : String) : Any{
	if(not self.hasStereotype(stereotype))
		return null;
	return self.getValue(self.getStereotype(stereotype), tag);
}


operation Element isLegacy() : Boolean {
	if(self.hasStereotype("Allocated")){
		return true;
	}
	return false;
}

operation Element notLegacy() : Boolean {
	return not self.isLegacy();
}